<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>TypeFast ‚Äî Free Online Typing Test</title>
  <meta name="description" content="A fast, lightweight typing test to measure your WPM and accuracy. Works offline, no sign‚Äëup, mobile friendly. " />
  <meta name="keywords" content="typing test, wpm, typing speed, accuracy, practice, keyboard" />
  <meta name="theme-color" content="#0ea5e9" />
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;800&display=swap" rel="stylesheet">
  <style>
    :root{
      --bg:#0b1220; --panel:#0f172a; --muted:#8ea0b6; --text:#e5e7eb; --brand:#0ea5e9; --good:#22c55e; --bad:#ef4444; --ring:rgba(14,165,233,.35);
    }
    [data-theme="light"]{ --bg:#f8fafc; --panel:#ffffff; --muted:#5b6b7b; --text:#0f172a; --brand:#0ea5e9; --good:#16a34a; --bad:#dc2626; --ring:rgba(14,165,233,.25); }
    *{box-sizing:border-box}
    html,body{height:100%}
    body{margin:0;font-family:Inter,system-ui,Segoe UI,Roboto,Arial,Helvetica,sans-serif;background:var(--bg);color:var(--text);display:flex;min-height:100vh}
    .wrap{max-width:980px;margin:0 auto;padding:24px;flex:1;display:flex;flex-direction:column;gap:16px}
    header{display:flex;align-items:center;justify-content:space-between;gap:12px}
    .brand{display:flex;align-items:center;gap:10px;font-weight:800;letter-spacing:.2px}
    .badge{background:linear-gradient(135deg,#22d3ee,#0ea5e9);width:34px;height:34px;border-radius:10px;display:grid;place-items:center;color:#00172a;font-weight:900}
    .controls{display:flex;flex-wrap:wrap;gap:10px}
    button,select{appearance:none;border:none;background:var(--panel);color:var(--text);padding:10px 14px;border-radius:12px;cursor:pointer;box-shadow:0 0 0 1px rgba(255,255,255,.05),0 6px 22px rgba(0,0,0,.25)}
    button.primary{background:linear-gradient(135deg,#22d3ee,#0ea5e9);color:#00172a;font-weight:800}
    button.ghost{background:transparent;box-shadow:0 0 0 1px rgba(255,255,255,.12)}
    button:focus,select:focus,.card:focus{outline:none;box-shadow:0 0 0 4px var(--ring)}
    main{display:grid;gap:16px}
    .card{background:var(--panel);border-radius:18px;padding:18px 16px;box-shadow:0 12px 40px rgba(0,0,0,.25)}
    .meta{display:grid;grid-template-columns:repeat(4,minmax(0,1fr));gap:12px}
    .kpi{display:flex;flex-direction:column;gap:6px;background:rgba(255,255,255,.02);padding:12px;border-radius:12px}
    .kpi .val{font-size:28px;font-weight:800}
    .kpi .label{font-size:12px;color:var(--muted)}
    .textzone{min-height:160px;font-size:20px;line-height:1.8;letter-spacing:.2px;user-select:none}
    .textzone .word{margin-right:10px}
    .textzone .char{opacity:.65}
    .textzone .current{position:relative}
    .textzone .current::after{content:"";position:absolute;left:-1px;bottom:-3px;width:1.5ch;height:3px;background:var(--brand);border-radius:2px}
    .textzone .hit{opacity:1;color:var(--text)}
    .textzone .miss{color:var(--bad);text-decoration:underline;text-decoration-thickness:2px}
    .muted{color:var(--muted)}
    .row{display:flex;align-items:center;gap:12px;flex-wrap:wrap}
    .hidden{display:none !important}

    .footer{display:flex;justify-content:space-between;align-items:center;color:var(--muted);font-size:13px}
    a{color:inherit}

    .result{display:none;position:fixed;inset:0;background:rgba(0,0,0,.55);backdrop-filter:blur(4px);padding:24px}
    .result .box{max-width:560px;margin:auto;background:var(--panel);border-radius:18px;padding:18px 16px}
    .result h2{margin:0 0 10px 0}

    .sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);border:0}

    @media (max-width:720px){
      .meta{grid-template-columns:repeat(2,minmax(0,1fr))}
      .textzone{min-height:140px;font-size:18px}
    }
  </style>
</head>
<body>
  <div class="wrap" id="app" data-theme="dark">
    <header>
      <div class="brand" aria-label="TypeFast Home">
        <div class="badge" aria-hidden="true">‚å®Ô∏è</div>
        <div>TypeFast</div>
      </div>
      <div class="controls" role="group" aria-label="Top controls">
        <select id="mode">
          <option value="time-15">‚è±Ô∏è 15s</option>
          <option value="time-30" selected>‚è±Ô∏è 30s</option>
          <option value="time-60">‚è±Ô∏è 60s</option>
          <option value="words-25">üìù 25 words</option>
          <option value="words-50">üìù 50 words</option>
        </select>
        <button id="start" class="primary">Start</button>
        <button id="restart" class="ghost">Restart</button>
        <button id="newText" class="ghost">New Text</button>
        <button id="theme" title="Toggle theme" class="ghost">üåô</button>
      </div>
    </header>

    <main>
      <section class="card">
        <div class="meta" role="status" aria-live="polite">
          <div class="kpi"><div class="label">WPM</div><div class="val" id="wpm">0</div></div>
          <div class="kpi"><div class="label">Accuracy</div><div class="val" id="acc">100%</div></div>
          <div class="kpi"><div class="label">Time</div><div class="val" id="timer">30s</div></div>
          <div class="kpi"><div class="label">Best</div><div class="val" id="best">‚Äî</div></div>
        </div>
      </section>

      <section class="card textzone" id="text" aria-label="Typing text" tabindex="0"></section>

      <section class="card">
        <div class="row">
          <input id="custom" class="ghost" style="flex:1;min-width:220px;background:transparent;box-shadow:0 0 0 1px rgba(255,255,255,.12);border-radius:12px;padding:10px 12px;color:var(--text)" placeholder="Or paste your own text and press Start‚Ä¶" />
        </div>
      </section>

      <div class="footer">
        <div>Made with ‚ô• for students and creators.</div>
        <div><a href="#" id="share">Share result</a> ¬∑ <a href="mailto:?subject=Feedback%20on%20TypeFast">Feedback</a></div>
      </div>
    </main>
  </div>

  <div class="result" id="result" role="dialog" aria-modal="true" aria-labelledby="resTitle">
    <div class="box">
      <h2 id="resTitle">Your Result</h2>
      <p class="muted" id="resDetail"></p>
      <div class="row" style="margin-top:10px">
        <button id="again" class="primary">Try Again</button>
        <button id="close" class="ghost">Close</button>
      </div>
    </div>
  </div>

  <script>
    // --- Data
    const DEFAULT_TEXTS = [
      "Typing is a superpower for students who build projects.",
      "Clean code is like a well organized desk, calm and efficient.",
      "Practice a little every day and your speed will surprise you.",
      "Dreams work best when you do. Keep shipping the small things.",
      "Bug fixing is like detective work. Follow the smallest clues.",
      "Great products start with great questions and patient notes.",
      "The keyboard is your instrument. Warm up before the concert.",
      "Simple is better than clever. Choose clarity over complexity.",
      "Consistency beats motivation. Set a tiny daily target.",
      "Craft is invisible. Users only feel the smooth experience.",
      "You do not need permission to build something helpful.",
      "Short feedback loops keep momentum alive in any project.",
      "Typing speed grows when your mind stops worrying about keys.",
      "Measure, improve, repeat. That's how mastery happens.",
    ];

    // --- State
    let words = [];
    let flat = [];
    let current = 0; // index in flat
    let started = false;
    let finished = false;
    let timerId = null;
    let totalTime = 30; // seconds
    let mode = 'time-30';

    let typed = 0, correct = 0, mistakes = 0;
    let startedAt = 0;

    // --- Elements
    const elText = document.getElementById('text');
    const elWpm = document.getElementById('wpm');
    const elAcc = document.getElementById('acc');
    const elTimer = document.getElementById('timer');
    const elBest = document.getElementById('best');
    const elStart = document.getElementById('start');
    const elRestart = document.getElementById('restart');
    const elTheme = document.getElementById('theme');
    const elMode = document.getElementById('mode');
    const elCustom = document.getElementById('custom');
    const elShare = document.getElementById('share');
    const elRes = document.getElementById('result');
    const elResDetail = document.getElementById('resDetail');

    // --- Helpers
    const rand = arr => arr[Math.floor(Math.random()*arr.length)];
    const clamp = (n,min,max)=>Math.min(max,Math.max(min,n));

    function setTheme(next){
      const root = document.getElementById('app');
      const t = next || (root.getAttribute('data-theme')==='dark'?'light':'dark');
      root.setAttribute('data-theme', t);
      elTheme.textContent = t==='dark'?'üåô':'‚òÄÔ∏è';
      localStorage.setItem('tf-theme', t);
    }

    function setMode(val){
      mode = val;
      let secs = 30;
      if(val.startsWith('time-')) secs = parseInt(val.split('-')[1],10);
      totalTime = secs;
      elTimer.textContent = secs + 's';
      reset(false);
    }

    function materialize(text){
      elText.innerHTML = '';
      words = text.trim().replace(/\n+/g,' ').split(/\s+/).filter(Boolean);
      flat = [];
      words.forEach((w,wi)=>{
        const wEl = document.createElement('span');
        wEl.className = 'word';
        for(let i=0;i<w.length;i++){
          const ch = document.createElement('span');
          ch.className = 'char';
          ch.dataset.c = w[i];
          ch.textContent = w[i];
          wEl.appendChild(ch);
          flat.push(ch);
        }
        const space = document.createElement('span');
        space.className = 'char';
        space.dataset.c = ' ';
        space.textContent = ' ';
        wEl.appendChild(space);
        flat.push(space);
        elText.appendChild(wEl);
      });
      current = 0;
      if(flat.length) flat[0].classList.add('current');
      elText.scrollTop = 0;
    }

    function chooseText(){
      const custom = elCustom.value.trim();
      if(custom.length>10) return custom;
      let s = '';
      while(s.split(' ').length < 80){ s += (s?' ':'') + rand(DEFAULT_TEXTS); }
      return s;
    }

    function reset(materializeNew=true){
      started=false; finished=false; typed=0; correct=0; mistakes=0;
      startedAt=0; if(timerId){clearInterval(timerId); timerId=null}
      if(materializeNew) materialize(chooseText());
      flat.forEach(ch=>{ch.classList.remove('hit','miss','current')});
      if(flat.length) flat[0]?.classList.add('current');
      updateKpis(0);
    }

    function start(){
      if(started) return;
      started = true; finished=false; startedAt = Date.now();
      timerId = setInterval(()=>{
        const elapsed = Math.floor((Date.now()-startedAt)/1000);
        const remain = clamp(totalTime - elapsed, 0, 10_000);
        elTimer.textContent = remain + 's';
        updateKpis(elapsed);
        if(mode.startsWith('time-') && remain<=0){
          finish();
        }
      }, 100);
    }

    function finish(){
      if(finished) return; finished = true;
      if(timerId){clearInterval(timerId); timerId=null}
      updateKpis(Math.max(1,(Date.now()-startedAt)/1000));
      const wpm = parseInt(elWpm.textContent,10)||0;
      const acc = elAcc.textContent;
      const best = parseFloat(localStorage.getItem('tf-best')||'0');
      if(wpm>best){ localStorage.setItem('tf-best', String(wpm)); }
      elBest.textContent = localStorage.getItem('tf-best')||'‚Äî';
      elRes.style.display='block';
      elResDetail.textContent = `WPM ${wpm} ¬∑ Accuracy ${acc} \u2014 Great work!`;
    }

    function updateKpis(elapsedSeconds){
      const mins = Math.max(0.01, elapsedSeconds/60);
      const wpm = Math.round((correct/5)/mins);
      const acc = typed ? Math.round((correct/Math.max(1,typed))*100) : 100;
      elWpm.textContent = isFinite(wpm)?wpm:0;
      elAcc.textContent = acc + '%';
      elBest.textContent = localStorage.getItem('tf-best')||'‚Äî';
    }

    function handleKey(e){
      if(finished) return;
      if(!started){ start(); }
      if(!flat.length) return;

      if(e.key === 'Tab'){ e.preventDefault(); return; }
      if(e.metaKey||e.ctrlKey||e.altKey) return;

      // Backspace: allow correction on the current char
      if(e.key === 'Backspace'){
        if(current>0){
          // Move back over spaces that were not typed correctly
          flat[current].classList.remove('current');
          current--; typed = Math.max(0, typed-1);
          if(flat[current].classList.contains('miss')){ mistakes = Math.max(0, mistakes-1); }
          if(flat[current].classList.contains('hit')){ correct = Math.max(0, correct-1); }
          flat[current].classList.remove('hit','miss');
          flat[current].classList.add('current');
        }
        e.preventDefault();
        updateKpis((Date.now()-startedAt)/1000);
        return;
      }

      const expected = flat[current]?.dataset.c || '';
      const ch = e.key.length===1 ? e.key : '';
      if(!ch) return; // ignore non-character keys

      if(ch === expected){
        flat[current].classList.add('hit');
        correct++;
      } else {
        flat[current].classList.add('miss');
        mistakes++;
      }
      flat[current].classList.remove('current');
      typed++;
      current = Math.min(current+1, flat.length-1);
      flat[current]?.classList.add('current');

      updateKpis((Date.now()-startedAt)/1000);

      if(mode.startsWith('words-')){
        const limit = parseInt(mode.split('-')[1], 10);
        // consider completed when we've advanced over [limit] spaces
        const spaces = flat.slice(0,current+1).filter(n=>n.dataset.c===' ').length;
        if(spaces>=limit){ finish(); }
      }

      // auto-scroll caret into view
      const caret = flat[current];
      if(caret){
        const r = caret.getBoundingClientRect();
        const pr = elText.getBoundingClientRect();
        if(r.bottom > pr.bottom-10) elText.scrollTop += (r.bottom - pr.bottom + 10);
        if(r.top < pr.top+10) elText.scrollTop -= (pr.top - r.top + 10);
      }
    }

    // --- Events
    elStart.addEventListener('click', ()=>{ reset(true); start(); elText.focus(); });
    elRestart.addEventListener('click', ()=>{ reset(true); elText.focus(); });
    elTheme.addEventListener('click', ()=> setTheme());
    elMode.addEventListener('change', e=> setMode(e.target.value));
    // New text on demand
    document.getElementById('newText').addEventListener('click', ()=>{ materialize(chooseText()); elText.focus(); });

    document.addEventListener('keydown', handleKey);

    document.getElementById('share').addEventListener('click', (e)=>{
      e.preventDefault();
      const text = `I just typed ${elWpm.textContent} WPM with ${elAcc.textContent} accuracy on TypeFast!`;
      if(navigator.share){ navigator.share({text, title:'TypeFast Typing Test', url: location.href}).catch(()=>{}); }
      else { navigator.clipboard?.writeText(text).then(()=> alert('Copied result to clipboard!')); }
    });

    document.getElementById('again').addEventListener('click', ()=>{ elRes.style.display='none'; reset(true); elText.focus(); });
    document.getElementById('close').addEventListener('click', ()=>{ elRes.style.display='none'; });

    // --- Init
    (function init(){
      setTheme(localStorage.getItem('tf-theme')||'dark');
      setMode('time-30');
      materialize(chooseText());
      elText.setAttribute('role','textbox');
      elText.setAttribute('aria-multiline','false');
      elText.focus();
    })();
  </script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>TypeFast ‚Äî Free Online Typing Test</title>
  <meta name="description" content="A fast, lightweight typing test to measure your WPM and accuracy. Works offline, no sign‚Äëup, mobile friendly. " />
  <meta name="keywords" content="typing test, wpm, typing speed, accuracy, practice, keyboard" />
  <meta name="theme-color" content="#0ea5e9" />
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;800&display=swap" rel="stylesheet">
  <style>
    :root{
      --bg:#0b1220; --panel:#0f172a; --muted:#8ea0b6; --text:#e5e7eb; --brand:#0ea5e9; --good:#22c55e; --bad:#ef4444; --ring:rgba(14,165,233,.35);
    }
    [data-theme="light"]{ --bg:#f8fafc; --panel:#ffffff; --muted:#5b6b7b; --text:#0f172a; --brand:#0ea5e9; --good:#16a34a; --bad:#dc2626; --ring:rgba(14,165,233,.25); }
    *{box-sizing:border-box}
    html,body{height:100%}
    body{margin:0;font-family:Inter,system-ui,Segoe UI,Roboto,Arial,Helvetica,sans-serif;background:var(--bg);color:var(--text);display:flex;min-height:100vh}
    .wrap{max-width:980px;margin:0 auto;padding:24px;flex:1;display:flex;flex-direction:column;gap:16px}
    header{display:flex;align-items:center;justify-content:space-between;gap:12px}
    .brand{display:flex;align-items:center;gap:10px;font-weight:800;letter-spacing:.2px}
    .badge{background:linear-gradient(135deg,#22d3ee,#0ea5e9);width:34px;height:34px;border-radius:10px;display:grid;place-items:center;color:#00172a;font-weight:900}
    .controls{display:flex;flex-wrap:wrap;gap:10px}
    button,select{appearance:none;border:none;background:var(--panel);color:var(--text);padding:10px 14px;border-radius:12px;cursor:pointer;box-shadow:0 0 0 1px rgba(255,255,255,.05),0 6px 22px rgba(0,0,0,.25)}
    button.primary{background:linear-gradient(135deg,#22d3ee,#0ea5e9);color:#00172a;font-weight:800}
    button.ghost{background:transparent;box-shadow:0 0 0 1px rgba(255,255,255,.12)}
    button:focus,select:focus,.card:focus{outline:none;box-shadow:0 0 0 4px var(--ring)}
    main{display:grid;gap:16px}
    .card{background:var(--panel);border-radius:18px;padding:18px 16px;box-shadow:0 12px 40px rgba(0,0,0,.25)}
    .meta{display:grid;grid-template-columns:repeat(4,minmax(0,1fr));gap:12px}
    .kpi{display:flex;flex-direction:column;gap:6px;background:rgba(255,255,255,.02);padding:12px;border-radius:12px}
    .kpi .val{font-size:28px;font-weight:800}
    .kpi .label{font-size:12px;color:var(--muted)}
    .textzone{min-height:160px;font-size:20px;line-height:1.8;letter-spacing:.2px;user-select:none}
    .textzone .word{margin-right:10px}
    .textzone .char{opacity:.65}
    .textzone .current{position:relative}
    .textzone .current::after{content:"";position:absolute;left:-1px;bottom:-3px;width:1.5ch;height:3px;background:var(--brand);border-radius:2px}
    .textzone .hit{opacity:1;color:var(--text)}
    .textzone .miss{color:var(--bad);text-decoration:underline;text-decoration-thickness:2px}
    .muted{color:var(--muted)}
    .row{display:flex;align-items:center;gap:12px;flex-wrap:wrap}
    .hidden{display:none !important}

    .footer{display:flex;justify-content:space-between;align-items:center;color:var(--muted);font-size:13px}
    a{color:inherit}

    .result{display:none;position:fixed;inset:0;background:rgba(0,0,0,.55);backdrop-filter:blur(4px);padding:24px}
    .result .box{max-width:560px;margin:auto;background:var(--panel);border-radius:18px;padding:18px 16px}
    .result h2{margin:0 0 10px 0}

    .sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);border:0}

    @media (max-width:720px){
      .meta{grid-template-columns:repeat(2,minmax(0,1fr))}
      .textzone{min-height:140px;font-size:18px}
    }
  </style>
</head>
<body>
  <div class="wrap" id="app" data-theme="dark">
    <header>
      <div class="brand" aria-label="TypeFast Home">
        <div class="badge" aria-hidden="true">‚å®Ô∏è</div>
        <div>TypeFast</div>
      </div>
      <div class="controls" role="group" aria-label="Top controls">
        <select id="mode">
          <option value="time-15">‚è±Ô∏è 15s</option>
          <option value="time-30" selected>‚è±Ô∏è 30s</option>
          <option value="time-60">‚è±Ô∏è 60s</option>
          <option value="words-25">üìù 25 words</option>
          <option value="words-50">üìù 50 words</option>
        </select>
        <button id="start" class="primary">Start</button>
        <button id="restart" class="ghost">Restart</button>
        <button id="newText" class="ghost">New Text</button>
        <button id="theme" title="Toggle theme" class="ghost">üåô</button>
      </div>
    </header>

    <main>
      <section class="card">
        <div class="meta" role="status" aria-live="polite">
          <div class="kpi"><div class="label">WPM</div><div class="val" id="wpm">0</div></div>
          <div class="kpi"><div class="label">Accuracy</div><div class="val" id="acc">100%</div></div>
          <div class="kpi"><div class="label">Time</div><div class="val" id="timer">30s</div></div>
          <div class="kpi"><div class="label">Best</div><div class="val" id="best">‚Äî</div></div>
        </div>
      </section>

      <section class="card textzone" id="text" aria-label="Typing text" tabindex="0"></section>

      <section class="card">
        <div class="row">
          <input id="custom" class="ghost" style="flex:1;min-width:220px;background:transparent;box-shadow:0 0 0 1px rgba(255,255,255,.12);border-radius:12px;padding:10px 12px;color:var(--text)" placeholder="Or paste your own text and press Start‚Ä¶" />
        </div>
      </section>

      <div class="footer">
        <div>Made with ‚ô• for students and creators.</div>
        <div><a href="#" id="share">Share result</a> ¬∑ <a href="mailto:?subject=Feedback%20on%20TypeFast">Feedback</a></div>
      </div>
    </main>
  </div>

  <div class="result" id="result" role="dialog" aria-modal="true" aria-labelledby="resTitle">
    <div class="box">
      <h2 id="resTitle">Your Result</h2>
      <p class="muted" id="resDetail"></p>
      <div class="row" style="margin-top:10px">
        <button id="again" class="primary">Try Again</button>
        <button id="close" class="ghost">Close</button>
      </div>
    </div>
  </div>

  <script>
    // --- Data
    const DEFAULT_TEXTS = [
      "Typing is a superpower for students who build projects.",
      "Clean code is like a well organized desk, calm and efficient.",
      "Practice a little every day and your speed will surprise you.",
      "Dreams work best when you do. Keep shipping the small things.",
      "Bug fixing is like detective work. Follow the smallest clues.",
      "Great products start with great questions and patient notes.",
      "The keyboard is your instrument. Warm up before the concert.",
      "Simple is better than clever. Choose clarity over complexity.",
      "Consistency beats motivation. Set a tiny daily target.",
      "Craft is invisible. Users only feel the smooth experience.",
      "You do not need permission to build something helpful.",
      "Short feedback loops keep momentum alive in any project.",
      "Typing speed grows when your mind stops worrying about keys.",
      "Measure, improve, repeat. That's how mastery happens.",
    ];

    // --- State
    let words = [];
    let flat = [];
    let current = 0; // index in flat
    let started = false;
    let finished = false;
    let timerId = null;
    let totalTime = 30; // seconds
    let mode = 'time-30';

    let typed = 0, correct = 0, mistakes = 0;
    let startedAt = 0;

    // --- Elements
    const elText = document.getElementById('text');
    const elWpm = document.getElementById('wpm');
    const elAcc = document.getElementById('acc');
    const elTimer = document.getElementById('timer');
    const elBest = document.getElementById('best');
    const elStart = document.getElementById('start');
    const elRestart = document.getElementById('restart');
    const elTheme = document.getElementById('theme');
    const elMode = document.getElementById('mode');
    const elCustom = document.getElementById('custom');
    const elShare = document.getElementById('share');
    const elRes = document.getElementById('result');
    const elResDetail = document.getElementById('resDetail');

    // --- Helpers
    const rand = arr => arr[Math.floor(Math.random()*arr.length)];
    const clamp = (n,min,max)=>Math.min(max,Math.max(min,n));

    function setTheme(next){
      const root = document.getElementById('app');
      const t = next || (root.getAttribute('data-theme')==='dark'?'light':'dark');
      root.setAttribute('data-theme', t);
      elTheme.textContent = t==='dark'?'üåô':'‚òÄÔ∏è';
      localStorage.setItem('tf-theme', t);
    }

    function setMode(val){
      mode = val;
      let secs = 30;
      if(val.startsWith('time-')) secs = parseInt(val.split('-')[1],10);
      totalTime = secs;
      elTimer.textContent = secs + 's';
      reset(false);
    }

    function materialize(text){
      elText.innerHTML = '';
      words = text.trim().replace(/\n+/g,' ').split(/\s+/).filter(Boolean);
      flat = [];
      words.forEach((w,wi)=>{
        const wEl = document.createElement('span');
        wEl.className = 'word';
        for(let i=0;i<w.length;i++){
          const ch = document.createElement('span');
          ch.className = 'char';
          ch.dataset.c = w[i];
          ch.textContent = w[i];
          wEl.appendChild(ch);
          flat.push(ch);
        }
        const space = document.createElement('span');
        space.className = 'char';
        space.dataset.c = ' ';
        space.textContent = ' ';
        wEl.appendChild(space);
        flat.push(space);
        elText.appendChild(wEl);
      });
      current = 0;
      if(flat.length) flat[0].classList.add('current');
      elText.scrollTop = 0;
    }

    function chooseText(){
      const custom = elCustom.value.trim();
      if(custom.length>10) return custom;
      let s = '';
      while(s.split(' ').length < 80){ s += (s?' ':'') + rand(DEFAULT_TEXTS); }
      return s;
    }

    function reset(materializeNew=true){
      started=false; finished=false; typed=0; correct=0; mistakes=0;
      startedAt=0; if(timerId){clearInterval(timerId); timerId=null}
      if(materializeNew) materialize(chooseText());
      flat.forEach(ch=>{ch.classList.remove('hit','miss','current')});
      if(flat.length) flat[0]?.classList.add('current');
      updateKpis(0);
    }

    function start(){
      if(started) return;
      started = true; finished=false; startedAt = Date.now();
      timerId = setInterval(()=>{
        const elapsed = Math.floor((Date.now()-startedAt)/1000);
        const remain = clamp(totalTime - elapsed, 0, 10_000);
        elTimer.textContent = remain + 's';
        updateKpis(elapsed);
        if(mode.startsWith('time-') && remain<=0){
          finish();
        }
      }, 100);
    }

    function finish(){
      if(finished) return; finished = true;
      if(timerId){clearInterval(timerId); timerId=null}
      updateKpis(Math.max(1,(Date.now()-startedAt)/1000));
      const wpm = parseInt(elWpm.textContent,10)||0;
      const acc = elAcc.textContent;
      const best = parseFloat(localStorage.getItem('tf-best')||'0');
      if(wpm>best){ localStorage.setItem('tf-best', String(wpm)); }
      elBest.textContent = localStorage.getItem('tf-best')||'‚Äî';
      elRes.style.display='block';
      elResDetail.textContent = `WPM ${wpm} ¬∑ Accuracy ${acc} \u2014 Great work!`;
    }

    function updateKpis(elapsedSeconds){
      const mins = Math.max(0.01, elapsedSeconds/60);
      const wpm = Math.round((correct/5)/mins);
      const acc = typed ? Math.round((correct/Math.max(1,typed))*100) : 100;
      elWpm.textContent = isFinite(wpm)?wpm:0;
      elAcc.textContent = acc + '%';
      elBest.textContent = localStorage.getItem('tf-best')||'‚Äî';
    }

    function handleKey(e){
      if(finished) return;
      if(!started){ start(); }
      if(!flat.length) return;

      if(e.key === 'Tab'){ e.preventDefault(); return; }
      if(e.metaKey||e.ctrlKey||e.altKey) return;

      // Backspace: allow correction on the current char
      if(e.key === 'Backspace'){
        if(current>0){
          // Move back over spaces that were not typed correctly
          flat[current].classList.remove('current');
          current--; typed = Math.max(0, typed-1);
          if(flat[current].classList.contains('miss')){ mistakes = Math.max(0, mistakes-1); }
          if(flat[current].classList.contains('hit')){ correct = Math.max(0, correct-1); }
          flat[current].classList.remove('hit','miss');
          flat[current].classList.add('current');
        }
        e.preventDefault();
        updateKpis((Date.now()-startedAt)/1000);
        return;
      }

      const expected = flat[current]?.dataset.c || '';
      const ch = e.key.length===1 ? e.key : '';
      if(!ch) return; // ignore non-character keys

      if(ch === expected){
        flat[current].classList.add('hit');
        correct++;
      } else {
        flat[current].classList.add('miss');
        mistakes++;
      }
      flat[current].classList.remove('current');
      typed++;
      current = Math.min(current+1, flat.length-1);
      flat[current]?.classList.add('current');

      updateKpis((Date.now()-startedAt)/1000);

      if(mode.startsWith('words-')){
        const limit = parseInt(mode.split('-')[1], 10);
        // consider completed when we've advanced over [limit] spaces
        const spaces = flat.slice(0,current+1).filter(n=>n.dataset.c===' ').length;
        if(spaces>=limit){ finish(); }
      }

      // auto-scroll caret into view
      const caret = flat[current];
      if(caret){
        const r = caret.getBoundingClientRect();
        const pr = elText.getBoundingClientRect();
        if(r.bottom > pr.bottom-10) elText.scrollTop += (r.bottom - pr.bottom + 10);
        if(r.top < pr.top+10) elText.scrollTop -= (pr.top - r.top + 10);
      }
    }

    // --- Events
    elStart.addEventListener('click', ()=>{ reset(true); start(); elText.focus(); });
    elRestart.addEventListener('click', ()=>{ reset(true); elText.focus(); });
    elTheme.addEventListener('click', ()=> setTheme());
    elMode.addEventListener('change', e=> setMode(e.target.value));
    // New text on demand
    document.getElementById('newText').addEventListener('click', ()=>{ materialize(chooseText()); elText.focus(); });

    document.addEventListener('keydown', handleKey);

    document.getElementById('share').addEventListener('click', (e)=>{
      e.preventDefault();
      const text = `I just typed ${elWpm.textContent} WPM with ${elAcc.textContent} accuracy on TypeFast!`;
      if(navigator.share){ navigator.share({text, title:'TypeFast Typing Test', url: location.href}).catch(()=>{}); }
      else { navigator.clipboard?.writeText(text).then(()=> alert('Copied result to clipboard!')); }
    });

    document.getElementById('again').addEventListener('click', ()=>{ elRes.style.display='none'; reset(true); elText.focus(); });
    document.getElementById('close').addEventListener('click', ()=>{ elRes.style.display='none'; });

    // --- Init
    (function init(){
      setTheme(localStorage.getItem('tf-theme')||'dark');
      setMode('time-30');
      materialize(chooseText());
      elText.setAttribute('role','textbox');
      elText.setAttribute('aria-multiline','false');
      elText.focus();
    })();
  </script>
</body>
</html>
